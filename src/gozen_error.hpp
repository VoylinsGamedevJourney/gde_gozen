#pragma once


#include <godot_cpp/classes/resource.hpp>
#include <godot_cpp/variant/utility_functions.hpp>


using namespace godot;

class GoZenError : public Object {
	GDCLASS(GoZenError, Object);

private:
	static void _print(String a_string);

public:
	enum ERROR {
		NO_ERROR = OK,

		ERR_NOT_OPEN_VIDEO,
		ERR_ALREADY_OPEN_VIDEO,
		ERR_OPENING_VIDEO,
		ERR_INVALID_VIDEO,
		ERR_INVALID_FRAMERATE,

		ERR_OPENING_AUDIO,

		ERR_NOT_OPEN_RENDERER,
		ERR_ALREADY_OPEN_RENDERER,
		ERR_NO_PATH_SET,
		ERR_NO_CODEC_SET_VIDEO,
		ERR_FAILED_SENDING_FRAME,
		ERR_ENCODING_FRAME,
		ERR_FAILED_FLUSH,
		ERR_AUDIO_ALREADY_SEND,
		ERR_AUDIO_NOT_SEND,
		ERR_AUDIO_NOT_ENABLED,
		ERR_FAILED_RESAMPLE,

		ERR_CREATING_AV_FORMAT_FAILED,
		ERR_NO_STREAM_INFO_FOUND,
		ERR_SEEKING,
		ERR_FAILED_CREATING_STREAM,
		ERR_COPY_STREAM_PARAMS,
		ERR_GET_FRAME_BUFFER,
		ERR_WRITING_HEADER,

		ERR_FAILED_FINDING_VIDEO_DECODER,
		ERR_FAILED_ALLOC_VIDEO_CODEC,
		ERR_FAILED_INIT_VIDEO_CODEC,
		ERR_FAILED_OPEN_VIDEO_CODEC,

		ERR_FAILED_FINDING_AUDIO_ENCODER,
		ERR_FAILED_ALLOC_AUDIO_CODEC,
		ERR_FAILED_OPEN_AUDIO_CODEC,

		ERR_FAILED_ALLOC_FRAME,
		ERR_FAILED_ALLOC_PACKET,
		ERR_FRAME_NOT_WRITABLE,

		ERR_CREATING_SWS,
		ERR_SCALING_FAILED,

		ERR_CREATING_SWR,
	};

	static void print_error(ERROR a_err);


protected:
	static inline void _bind_methods() {
		BIND_ENUM_CONSTANT(NO_ERROR);

		BIND_ENUM_CONSTANT(ERR_NOT_OPEN_VIDEO);
		BIND_ENUM_CONSTANT(ERR_ALREADY_OPEN_VIDEO);
		BIND_ENUM_CONSTANT(ERR_OPENING_VIDEO);
		BIND_ENUM_CONSTANT(ERR_INVALID_VIDEO);
		BIND_ENUM_CONSTANT(ERR_INVALID_FRAMERATE);

		BIND_ENUM_CONSTANT(ERR_OPENING_AUDIO);

		BIND_ENUM_CONSTANT(ERR_NOT_OPEN_RENDERER);
		BIND_ENUM_CONSTANT(ERR_ALREADY_OPEN_RENDERER);
		BIND_ENUM_CONSTANT(ERR_NO_PATH_SET);
		BIND_ENUM_CONSTANT(ERR_NO_CODEC_SET_VIDEO);
		BIND_ENUM_CONSTANT(ERR_FAILED_SENDING_FRAME);
		BIND_ENUM_CONSTANT(ERR_ENCODING_FRAME);
		BIND_ENUM_CONSTANT(ERR_FAILED_FLUSH);
		BIND_ENUM_CONSTANT(ERR_AUDIO_ALREADY_SEND);
		BIND_ENUM_CONSTANT(ERR_AUDIO_NOT_SEND);
		BIND_ENUM_CONSTANT(ERR_AUDIO_NOT_ENABLED);
		BIND_ENUM_CONSTANT(ERR_FAILED_RESAMPLE);

		BIND_ENUM_CONSTANT(ERR_CREATING_AV_FORMAT_FAILED);
		BIND_ENUM_CONSTANT(ERR_NO_STREAM_INFO_FOUND);
		BIND_ENUM_CONSTANT(ERR_SEEKING);
		BIND_ENUM_CONSTANT(ERR_FAILED_CREATING_STREAM);
		BIND_ENUM_CONSTANT(ERR_COPY_STREAM_PARAMS);
		BIND_ENUM_CONSTANT(ERR_GET_FRAME_BUFFER);
		BIND_ENUM_CONSTANT(ERR_WRITING_HEADER);

		BIND_ENUM_CONSTANT(ERR_FAILED_FINDING_VIDEO_DECODER);
		BIND_ENUM_CONSTANT(ERR_FAILED_ALLOC_VIDEO_CODEC);
		BIND_ENUM_CONSTANT(ERR_FAILED_INIT_VIDEO_CODEC);
		BIND_ENUM_CONSTANT(ERR_FAILED_OPEN_VIDEO_CODEC);

		BIND_ENUM_CONSTANT(ERR_FAILED_FINDING_AUDIO_ENCODER);
		BIND_ENUM_CONSTANT(ERR_FAILED_ALLOC_AUDIO_CODEC);
		BIND_ENUM_CONSTANT(ERR_FAILED_OPEN_AUDIO_CODEC);

		BIND_ENUM_CONSTANT(ERR_FAILED_ALLOC_FRAME);
		BIND_ENUM_CONSTANT(ERR_FAILED_ALLOC_PACKET);
		BIND_ENUM_CONSTANT(ERR_FRAME_NOT_WRITABLE);

		BIND_ENUM_CONSTANT(ERR_CREATING_SWS);
		BIND_ENUM_CONSTANT(ERR_SCALING_FAILED);

		BIND_ENUM_CONSTANT(ERR_CREATING_SWR);

		ClassDB::bind_static_method("GoZenError", D_METHOD("print_error"), &GoZenError::print_error);
	}
};

VARIANT_ENUM_CAST(GoZenError::ERROR);
